// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/drain (interfaces: DrainStrategy)

// Package drain is a generated GoMock package.
package drain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDrainStrategy is a mock of DrainStrategy interface
type MockDrainStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockDrainStrategyMockRecorder
}

// MockDrainStrategyMockRecorder is the mock recorder for MockDrainStrategy
type MockDrainStrategyMockRecorder struct {
	mock *MockDrainStrategy
}

// NewMockDrainStrategy creates a new mock instance
func NewMockDrainStrategy(ctrl *gomock.Controller) *MockDrainStrategy {
	mock := &MockDrainStrategy{ctrl: ctrl}
	mock.recorder = &MockDrainStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrainStrategy) EXPECT() *MockDrainStrategyMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockDrainStrategy) Execute() (*DrainStrategyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*DrainStrategyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockDrainStrategyMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDrainStrategy)(nil).Execute))
}

// HasFailed mocks base method
func (m *MockDrainStrategy) HasFailed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFailed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFailed indicates an expected call of HasFailed
func (mr *MockDrainStrategyMockRecorder) HasFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFailed", reflect.TypeOf((*MockDrainStrategy)(nil).HasFailed))
}
