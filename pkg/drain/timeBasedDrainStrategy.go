// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/drain (interfaces: TimeBasedDrainStrategy)

// Package drain is a generated GoMock package.
package drain

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	time "time"
)

// MockTimeBasedDrainStrategy is a mock of TimeBasedDrainStrategy interface
type MockTimeBasedDrainStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockTimeBasedDrainStrategyMockRecorder
}

// MockTimeBasedDrainStrategyMockRecorder is the mock recorder for MockTimeBasedDrainStrategy
type MockTimeBasedDrainStrategyMockRecorder struct {
	mock *MockTimeBasedDrainStrategy
}

// NewMockTimeBasedDrainStrategy creates a new mock instance
func NewMockTimeBasedDrainStrategy(ctrl *gomock.Controller) *MockTimeBasedDrainStrategy {
	mock := &MockTimeBasedDrainStrategy{ctrl: ctrl}
	mock.recorder = &MockTimeBasedDrainStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeBasedDrainStrategy) EXPECT() *MockTimeBasedDrainStrategyMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockTimeBasedDrainStrategy) Execute() (*DrainStrategyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*DrainStrategyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockTimeBasedDrainStrategyMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTimeBasedDrainStrategy)(nil).Execute))
}

// GetDescription mocks base method
func (m *MockTimeBasedDrainStrategy) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription
func (mr *MockTimeBasedDrainStrategyMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockTimeBasedDrainStrategy)(nil).GetDescription))
}

// GetName mocks base method
func (m *MockTimeBasedDrainStrategy) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockTimeBasedDrainStrategyMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTimeBasedDrainStrategy)(nil).GetName))
}

// GetWaitDuration mocks base method
func (m *MockTimeBasedDrainStrategy) GetWaitDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetWaitDuration indicates an expected call of GetWaitDuration
func (mr *MockTimeBasedDrainStrategyMockRecorder) GetWaitDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitDuration", reflect.TypeOf((*MockTimeBasedDrainStrategy)(nil).GetWaitDuration))
}

// HasFailed mocks base method
func (m *MockTimeBasedDrainStrategy) HasFailed(arg0 *v1.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFailed", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFailed indicates an expected call of HasFailed
func (mr *MockTimeBasedDrainStrategyMockRecorder) HasFailed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFailed", reflect.TypeOf((*MockTimeBasedDrainStrategy)(nil).HasFailed), arg0)
}
