// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/drain (interfaces: DrainStrategyBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/managed-upgrade-operator/pkg/apis/upgrade/v1alpha1"
	drain "github.com/openshift/managed-upgrade-operator/pkg/drain"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDrainStrategyBuilder is a mock of DrainStrategyBuilder interface
type MockDrainStrategyBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDrainStrategyBuilderMockRecorder
}

// MockDrainStrategyBuilderMockRecorder is the mock recorder for MockDrainStrategyBuilder
type MockDrainStrategyBuilderMockRecorder struct {
	mock *MockDrainStrategyBuilder
}

// NewMockDrainStrategyBuilder creates a new mock instance
func NewMockDrainStrategyBuilder(ctrl *gomock.Controller) *MockDrainStrategyBuilder {
	mock := &MockDrainStrategyBuilder{ctrl: ctrl}
	mock.recorder = &MockDrainStrategyBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrainStrategyBuilder) EXPECT() *MockDrainStrategyBuilderMockRecorder {
	return m.recorder
}

// NewDrainStrategy mocks base method
func (m *MockDrainStrategyBuilder) NewDrainStrategy(arg0 client.Client, arg1 *v1alpha1.UpgradeConfig, arg2 *v1.Node, arg3 *drain.NodeDrain) (drain.DrainStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDrainStrategy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(drain.DrainStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDrainStrategy indicates an expected call of NewDrainStrategy
func (mr *MockDrainStrategyBuilderMockRecorder) NewDrainStrategy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDrainStrategy", reflect.TypeOf((*MockDrainStrategyBuilder)(nil).NewDrainStrategy), arg0, arg1, arg2, arg3)
}
